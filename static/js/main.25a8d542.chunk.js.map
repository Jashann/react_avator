{"version":3,"sources":["logo.svg","Components/Card/card.component.jsx","Components/CardList/cardList.component.jsx","Components/Searchbox/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","state","this","user","username","email","id","className","src","alt","React","Component","CardList","users","map","i","key","Searchbox","onChange","handle","type","placeholder","App","getValue","e","setState","searchText","target","value","trim","filteredUsers","filter","toLowerCase","includes","fetch","then","res","json","usersArr","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,oLCqB5BC,G,oEAjBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAKT,IAAD,EACyBC,KAAKF,MAAMG,KAAnCC,EADD,EACCA,SAAUC,EADX,EACWA,MAAOC,EADlB,EACkBA,GACzB,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAG,+CAA0CF,GAAMG,IAAI,WAC5D,4BAAKL,GACL,4BAAKC,Q,GAZMK,IAAMC,YCaVC,G,6KAVX,OACE,yBAAKL,UAAU,aACZL,KAAKF,MAAMa,MAAMC,KAAI,SAACX,EAAMY,GAC3B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGZ,KAAMA,Y,GALdO,IAAMC,YCDhBM,G,MAAY,SAACjB,GACxB,OACE,2BACEkB,SAAUlB,EAAMmB,OAChBZ,UAAU,eACVa,KAAK,SACLC,YAAY,kBCqCHC,E,kDAtCb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAORuB,SAAW,SAACC,GACV,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,MAAMC,UAP3C,EAAK5B,MAAQ,CACXY,MAAO,GACPa,WAAY,IAJG,E,qDAYT,IAAD,EACqBxB,KAAKD,MAA3BY,EADC,EACDA,MAAOa,EADN,EACMA,WAGPI,EAAgBjB,EAAMkB,QAAO,SAAU5B,GAC3C,GAAIA,EAAKC,SAAS4B,cAAcC,SAASP,EAAWM,eAClD,OAAO7B,KAIX,OACE,yBAAKI,UAAU,OACb,4BAAQA,UAAU,eAAlB,aACA,kBAAC,EAAD,CAAWY,OAAQjB,KAAKqB,WACxB,kBAAC,EAAD,CAAUV,MAAOiB,O,0CAKF,IAAD,OAClBI,MAAM,+CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAc,EAAKb,SAAS,CAAEZ,MAAOyB,W,GAnC/B5B,IAAMC,WCKJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.25a8d542.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nclass Card extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { username, email, id } = this.props.user;\r\n    return (\r\n      <div className=\"card\">\r\n        <img src={`https://picsum.photos/300/300?random=${id}`} alt=\"avatar\" />\r\n        <h2>{username}</h2>\r\n        <h4>{email}</h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../Card/card.component\";\r\nimport \"./cardList.styles.css\";\r\n\r\nclass CardList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"card-list\">\r\n        {this.props.users.map((user, i) => {\r\n          return <Card key={i} user={user} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./searchbox.styles.css\";\r\n\r\nexport const Searchbox = (props) => {\r\n  return (\r\n    <input\r\n      onChange={props.handle}\r\n      className=\"search-input\"\r\n      type=\"search\"\r\n      placeholder=\"Search name\"\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\n// eslint-disable-next-line no-unused-vars\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CardList from \"./Components/CardList/cardList.component\";\nimport { Searchbox } from \"./Components/Searchbox/searchbox.component\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [],\n      searchText: \"\",\n    };\n  }\n\n  getValue = (e) => {\n    this.setState({ searchText: e.target.value.trim() });\n  };\n\n  render() {\n    let { users, searchText } = this.state;\n\n    // eslint-disable-next-line array-callback-return\n    const filteredUsers = users.filter(function (user) {\n      if (user.username.toLowerCase().includes(searchText.toLowerCase())) {\n        return user;\n      }\n    });\n\n    return (\n      <div className=\"App\">\n        <header className=\"main-header\"> Avators </header>\n        <Searchbox handle={this.getValue} />\n        <CardList users={filteredUsers} />\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users/\")\n      .then((res) => res.json())\n      .then((usersArr) => this.setState({ users: usersArr }));\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}